{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","items","console","log","listItems","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItems","icon","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","filterItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,8NCmC5BC,MA9Bf,SAAmBC,GACf,IAAMC,EAAQD,EAAMC,MACpBC,QAAQC,IAAIF,GACZ,IAAMG,EAAYH,EAAMI,KAAI,SAAAC,GAEzB,OACF,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC3B,2BACD,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAC1Dd,EAAMe,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QACzC,8BAEA,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,QAAS,WAC1CjB,EAAMkB,YAAYZ,EAAKE,MACxBW,KAAK,gBAUR,OACA,6BAAMf,I,iBCtBdgB,IAAQC,IAAIC,K,IAyFGC,E,kDAtFb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDwB,MAAQ,CACXvB,MAAM,GACNwB,YAAY,CACVb,KAAK,GACLJ,IAAI,KAGR,EAAKkB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKT,YAAc,EAAKA,YAAYS,KAAjB,gBACnB,EAAKZ,UAAY,EAAKA,UAAUY,KAAf,gBAZD,E,wDAeNb,GACVe,KAAKC,SAAS,CACVL,YAAY,CACVb,KAAME,EAAEE,OAAOL,MACfH,IAAIuB,KAAKC,W,8BAKTlB,GACNA,EAAEmB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAC3B,GAAmB,KAAhBS,EAAQtB,KAAW,CACpB,IAAMX,EAAK,sBAAO4B,KAAKL,MAAMvB,OAAlB,CAAyBiC,IACtCL,KAAKC,SAAS,CACZ7B,MAAOA,EACPwB,YAAY,CACVb,KAAK,GACLJ,IAAI,S,kCAQEA,GACV,IAAM2B,EAAcN,KAAKL,MAAMvB,MAAMmC,QAAO,SAAA9B,GAAI,OAC9CA,EAAKE,MAAMA,KACXqB,KAAKC,SAAS,CACZ7B,MAAOkC,M,gCAKHvB,EAAKJ,GACbN,QAAQC,IAAI,SAAS0B,KAAKL,MAAMvB,OAChC,IAAMA,EAAQ4B,KAAKL,MAAMvB,MACzBA,EAAMI,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZN,QAAQC,IAAIG,EAAKE,IAAK,OAAOA,GAC7BF,EAAKM,KAAMA,MAGfiB,KAAKC,SAAS,CACZ7B,MAAOA,M,+BAQT,OACE,yBAAKM,UAAW,OACd,gCACA,0BAAMG,GAAK,aAAa2B,SAAWR,KAAKD,SACtC,2BAAOnB,KAAO,OAAO6B,YAAc,cAClC3B,MAAOkB,KAAKL,MAAMC,YAAYb,KAAMC,SAAUgB,KAAKH,cAClD,4BAAQjB,KAAO,UAAf,QAEJ,2BAAIoB,KAAKL,MAAMvB,MAAMW,MACrB,kBAAC,EAAD,CAAWX,MAAS4B,KAAKL,MAAMvB,MAAOiB,YAAeW,KAAKX,YAAcH,UAAac,KAAKd,kB,GA9EhFwB,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.11d8bdad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './ListItems.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'; \n\n\nfunction ListItems(props){\n    const items = props.items;\n    console.log(items);\n    const listItems = items.map(item =>\n   {\n       return (\n     <div className=\"list\" key={item.key}>\n          <p>\n         <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>{\n             props.setUpdate(e.target.value,item.key)}}/>\n        <span>\n       \n        <FontAwesomeIcon className=\"faicons\" onClick={() => {\n            props.deleteItems(item.key)\n        }} icon=\"trash\" />\n        </span>\n     </p>\n    </div>\n       ) \n\n                \n\n    })\n\n        return(\n        <div>{listItems}</div>\n        )\n    \n}\n\nexport default ListItems;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { render } from '@testing-library/react';\nimport ListItems from './ListItems'\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }  \n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItems = this.deleteItems.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n\n  handleInput(e){\n    this.setState({\n        currentItem:{\n          text: e.target.value,\n          key:Date.now()\n        }\n      })\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !==\"\"){\n      const items = [...this.state.items, newItem];\n    this.setState({\n      items: items,\n      currentItem:{\n        text:'',\n        key:''\n        }\n      })\n\n    }\n\n  }\n\n  deleteItems(key){\n    const filterItems = this.state.items.filter(item =>\n      item.key!==key);\n      this.setState({\n        items: filterItems\n      })\n  \n  }\n\n  setUpdate(text,key){\n    console.log(\"items:\"+this.state.items);\n    const items = this.state.items;\n    items.map(item=>{      \n      if(item.key===key){\n        console.log(item.key +\"    \"+key)\n        item.text= text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n    \n   \n  }\n\n\n  render(){\n    return (\n      <div className =\"App\">\n        <header>\n        <form id = \"to-do-form\" onSubmit ={this.addItem}>\n          <input type = \"text\" placeholder = \"Enter items\"\n           value={this.state.currentItem.text} onChange={this.handleInput}></input>\n            <button type = \"submit\">Add</button>\n        </form>\n        <p>{this.state.items.text}</p>\n        <ListItems items = {this.state.items} deleteItems = {this.deleteItems } setUpdate = {this.setUpdate}/>\n      </header>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}